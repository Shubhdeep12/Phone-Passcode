
PROJECT1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000756  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005a  00800060  00000756  000007ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000052  00000000  00000000  00000844  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001539  00000000  00000000  00000896  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001d4  00000000  00000000  00001dcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000c18  00000000  00000000  00001fa3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  00002bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ea  00000000  00000000  00002c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000671  00000000  00000000  00002d26  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000278  00000000  00000000  00003397  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e5       	ldi	r30, 0x56	; 86
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 3b       	cpi	r26, 0xBA	; 186
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa eb       	ldi	r26, 0xBA	; 186
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 3b       	cpi	r26, 0xBA	; 186
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 75 01 	call	0x2ea	; 0x2ea <main>
  8a:	0c 94 a9 03 	jmp	0x752	; 0x752 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <string>:

}
}

void string(char *str)
{
  92:	fc 01       	movw	r30, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  94:	2a e1       	ldi	r18, 0x1A	; 26
  96:	14 c0       	rjmp	.+40     	; 0xc0 <string+0x2e>
PORTC=PORTC-0X04;
_delay_us(10);
}
void data(char b)
{
PORTC=((b&0xf0)|0x05);
  98:	89 2f       	mov	r24, r25
  9a:	80 7f       	andi	r24, 0xF0	; 240
  9c:	85 60       	ori	r24, 0x05	; 5
  9e:	85 bb       	out	0x15, r24	; 21
PORTC=PORTC-0X04;
  a0:	85 b3       	in	r24, 0x15	; 21
  a2:	84 50       	subi	r24, 0x04	; 4
  a4:	85 bb       	out	0x15, r24	; 21
  a6:	82 2f       	mov	r24, r18
  a8:	8a 95       	dec	r24
  aa:	f1 f7       	brne	.-4      	; 0xa8 <string+0x16>
_delay_us(10);

PORTC=((b<<4)&0xf0|0x05);
  ac:	92 95       	swap	r25
  ae:	90 7f       	andi	r25, 0xF0	; 240
  b0:	95 60       	ori	r25, 0x05	; 5
  b2:	95 bb       	out	0x15, r25	; 21
PORTC=PORTC-0X04;
  b4:	85 b3       	in	r24, 0x15	; 21
  b6:	84 50       	subi	r24, 0x04	; 4
  b8:	85 bb       	out	0x15, r24	; 21
  ba:	82 2f       	mov	r24, r18
  bc:	8a 95       	dec	r24
  be:	f1 f7       	brne	.-4      	; 0xbc <string+0x2a>
}

void string(char *str)
{
int i=0;
while(str[i]!='\0')
  c0:	91 91       	ld	r25, Z+
  c2:	99 23       	and	r25, r25
  c4:	49 f7       	brne	.-46     	; 0x98 <string+0x6>
{
data(str[i]);
i++;
}}
  c6:	08 95       	ret

000000c8 <loc>:
void loc(char a)
{
  c8:	98 2f       	mov	r25, r24
  ca:	90 7f       	andi	r25, 0xF0	; 240
  cc:	94 60       	ori	r25, 0x04	; 4
  ce:	95 bb       	out	0x15, r25	; 21
PORTC=((a&0xf0)|0x04);
PORTC=PORTC-0X04;
  d0:	95 b3       	in	r25, 0x15	; 21
  d2:	94 50       	subi	r25, 0x04	; 4
  d4:	95 bb       	out	0x15, r25	; 21
  d6:	9a e1       	ldi	r25, 0x1A	; 26
  d8:	29 2f       	mov	r18, r25
  da:	2a 95       	dec	r18
  dc:	f1 f7       	brne	.-4      	; 0xda <loc+0x12>
_delay_us(10);
PORTC=((a<<4)&0xf0|0x04);
  de:	82 95       	swap	r24
  e0:	80 7f       	andi	r24, 0xF0	; 240
  e2:	84 60       	ori	r24, 0x04	; 4
  e4:	85 bb       	out	0x15, r24	; 21
PORTC=PORTC-0X04;
  e6:	85 b3       	in	r24, 0x15	; 21
  e8:	84 50       	subi	r24, 0x04	; 4
  ea:	85 bb       	out	0x15, r24	; 21
  ec:	9a 95       	dec	r25
  ee:	f1 f7       	brne	.-4      	; 0xec <loc+0x24>
_delay_us(10);
}
  f0:	08 95       	ret

000000f2 <data>:
void data(char b)
{
  f2:	98 2f       	mov	r25, r24
  f4:	90 7f       	andi	r25, 0xF0	; 240
  f6:	95 60       	ori	r25, 0x05	; 5
  f8:	95 bb       	out	0x15, r25	; 21
PORTC=((b&0xf0)|0x05);
PORTC=PORTC-0X04;
  fa:	95 b3       	in	r25, 0x15	; 21
  fc:	94 50       	subi	r25, 0x04	; 4
  fe:	95 bb       	out	0x15, r25	; 21
 100:	9a e1       	ldi	r25, 0x1A	; 26
 102:	29 2f       	mov	r18, r25
 104:	2a 95       	dec	r18
 106:	f1 f7       	brne	.-4      	; 0x104 <data+0x12>
_delay_us(10);

PORTC=((b<<4)&0xf0|0x05);
 108:	82 95       	swap	r24
 10a:	80 7f       	andi	r24, 0xF0	; 240
 10c:	85 60       	ori	r24, 0x05	; 5
 10e:	85 bb       	out	0x15, r24	; 21
PORTC=PORTC-0X04;
 110:	85 b3       	in	r24, 0x15	; 21
 112:	84 50       	subi	r24, 0x04	; 4
 114:	85 bb       	out	0x15, r24	; 21
 116:	9a 95       	dec	r25
 118:	f1 f7       	brne	.-4      	; 0x116 <data+0x24>
_delay_us(10);
}
 11a:	08 95       	ret

0000011c <ini>:
void ini()
{
 11c:	34 e0       	ldi	r19, 0x04	; 4
 11e:	35 bb       	out	0x15, r19	; 21
i++;
}}
void loc(char a)
{
PORTC=((a&0xf0)|0x04);
PORTC=PORTC-0X04;
 120:	85 b3       	in	r24, 0x15	; 21
 122:	84 50       	subi	r24, 0x04	; 4
 124:	85 bb       	out	0x15, r24	; 21
 126:	2a e1       	ldi	r18, 0x1A	; 26
 128:	82 2f       	mov	r24, r18
 12a:	8a 95       	dec	r24
 12c:	f1 f7       	brne	.-4      	; 0x12a <ini+0xe>
_delay_us(10);
PORTC=((a<<4)&0xf0|0x04);
 12e:	94 e2       	ldi	r25, 0x24	; 36
 130:	95 bb       	out	0x15, r25	; 21
PORTC=PORTC-0X04;
 132:	85 b3       	in	r24, 0x15	; 21
 134:	84 50       	subi	r24, 0x04	; 4
 136:	85 bb       	out	0x15, r24	; 21
 138:	82 2f       	mov	r24, r18
 13a:	8a 95       	dec	r24
 13c:	f1 f7       	brne	.-4      	; 0x13a <ini+0x1e>
data(str[i]);
i++;
}}
void loc(char a)
{
PORTC=((a&0xf0)|0x04);
 13e:	95 bb       	out	0x15, r25	; 21
PORTC=PORTC-0X04;
 140:	85 b3       	in	r24, 0x15	; 21
 142:	84 50       	subi	r24, 0x04	; 4
 144:	85 bb       	out	0x15, r24	; 21
 146:	82 2f       	mov	r24, r18
 148:	8a 95       	dec	r24
 14a:	f1 f7       	brne	.-4      	; 0x148 <ini+0x2c>
_delay_us(10);
PORTC=((a<<4)&0xf0|0x04);
 14c:	84 e8       	ldi	r24, 0x84	; 132
 14e:	85 bb       	out	0x15, r24	; 21
PORTC=PORTC-0X04;
 150:	85 b3       	in	r24, 0x15	; 21
 152:	84 50       	subi	r24, 0x04	; 4
 154:	85 bb       	out	0x15, r24	; 21
 156:	82 2f       	mov	r24, r18
 158:	8a 95       	dec	r24
 15a:	f1 f7       	brne	.-4      	; 0x158 <ini+0x3c>
data(str[i]);
i++;
}}
void loc(char a)
{
PORTC=((a&0xf0)|0x04);
 15c:	35 bb       	out	0x15, r19	; 21
PORTC=PORTC-0X04;
 15e:	85 b3       	in	r24, 0x15	; 21
 160:	84 50       	subi	r24, 0x04	; 4
 162:	85 bb       	out	0x15, r24	; 21
 164:	82 2f       	mov	r24, r18
 166:	8a 95       	dec	r24
 168:	f1 f7       	brne	.-4      	; 0x166 <ini+0x4a>
_delay_us(10);
PORTC=((a<<4)&0xf0|0x04);
 16a:	84 ec       	ldi	r24, 0xC4	; 196
 16c:	85 bb       	out	0x15, r24	; 21
PORTC=PORTC-0X04;
 16e:	85 b3       	in	r24, 0x15	; 21
 170:	84 50       	subi	r24, 0x04	; 4
 172:	85 bb       	out	0x15, r24	; 21
 174:	2a 95       	dec	r18
 176:	f1 f7       	brne	.-4      	; 0x174 <ini+0x58>
{
loc(0x02); //for home screen
loc(0x28); //to work lcd in  bit mode
loc(0x0c); //display on , cursor off

}
 178:	08 95       	ret

0000017a <num>:
 void num(char ch)
{
 17a:	28 2f       	mov	r18, r24
int x;
if(ch==0)
 17c:	88 23       	and	r24, r24
 17e:	09 f0       	breq	.+2      	; 0x182 <num+0x8>
 180:	3d c0       	rjmp	.+122    	; 0x1fc <num+0x82>
PORTC=PORTC-0X04;
_delay_us(10);
}
void data(char b)
{
PORTC=((b&0xf0)|0x05);
 182:	85 e3       	ldi	r24, 0x35	; 53
 184:	85 bb       	out	0x15, r24	; 21
PORTC=PORTC-0X04;
 186:	85 b3       	in	r24, 0x15	; 21
 188:	84 50       	subi	r24, 0x04	; 4
 18a:	85 bb       	out	0x15, r24	; 21
 18c:	9a e1       	ldi	r25, 0x1A	; 26
 18e:	89 2f       	mov	r24, r25
 190:	8a 95       	dec	r24
 192:	f1 f7       	brne	.-4      	; 0x190 <num+0x16>
_delay_us(10);

PORTC=((b<<4)&0xf0|0x05);
 194:	85 e0       	ldi	r24, 0x05	; 5
 196:	85 bb       	out	0x15, r24	; 21
PORTC=PORTC-0X04;
 198:	85 b3       	in	r24, 0x15	; 21
 19a:	84 50       	subi	r24, 0x04	; 4
 19c:	85 bb       	out	0x15, r24	; 21
 19e:	9a 95       	dec	r25
 1a0:	f1 f7       	brne	.-4      	; 0x19e <num+0x24>
 1a2:	2c c0       	rjmp	.+88     	; 0x1fc <num+0x82>
data(str[i]);
i++;
}}
void loc(char a)
{
PORTC=((a&0xf0)|0x04);
 1a4:	55 bb       	out	0x15, r21	; 21
PORTC=PORTC-0X04;
 1a6:	85 b3       	in	r24, 0x15	; 21
 1a8:	84 50       	subi	r24, 0x04	; 4
 1aa:	85 bb       	out	0x15, r24	; 21
 1ac:	83 2f       	mov	r24, r19
 1ae:	8a 95       	dec	r24
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <num+0x34>
_delay_us(10);
PORTC=((a<<4)&0xf0|0x04);
 1b2:	45 bb       	out	0x15, r20	; 21
PORTC=PORTC-0X04;
 1b4:	85 b3       	in	r24, 0x15	; 21
 1b6:	84 50       	subi	r24, 0x04	; 4
 1b8:	85 bb       	out	0x15, r24	; 21
 1ba:	83 2f       	mov	r24, r19
 1bc:	8a 95       	dec	r24
 1be:	f1 f7       	brne	.-4      	; 0x1bc <num+0x42>
data(48);
while(ch!=0)
{
loc(0x04);
x=ch%10;
data(48+x);
 1c0:	82 2f       	mov	r24, r18
 1c2:	6a e0       	ldi	r22, 0x0A	; 10
 1c4:	0e 94 9d 03 	call	0x73a	; 0x73a <__udivmodqi4>
 1c8:	90 5d       	subi	r25, 0xD0	; 208
PORTC=PORTC-0X04;
_delay_us(10);
}
void data(char b)
{
PORTC=((b&0xf0)|0x05);
 1ca:	89 2f       	mov	r24, r25
 1cc:	80 7f       	andi	r24, 0xF0	; 240
 1ce:	85 60       	ori	r24, 0x05	; 5
 1d0:	85 bb       	out	0x15, r24	; 21
PORTC=PORTC-0X04;
 1d2:	85 b3       	in	r24, 0x15	; 21
 1d4:	84 50       	subi	r24, 0x04	; 4
 1d6:	85 bb       	out	0x15, r24	; 21
 1d8:	83 2f       	mov	r24, r19
 1da:	8a 95       	dec	r24
 1dc:	f1 f7       	brne	.-4      	; 0x1da <num+0x60>
_delay_us(10);

PORTC=((b<<4)&0xf0|0x05);
 1de:	92 95       	swap	r25
 1e0:	90 7f       	andi	r25, 0xF0	; 240
 1e2:	95 60       	ori	r25, 0x05	; 5
 1e4:	95 bb       	out	0x15, r25	; 21
PORTC=PORTC-0X04;
 1e6:	85 b3       	in	r24, 0x15	; 21
 1e8:	84 50       	subi	r24, 0x04	; 4
 1ea:	85 bb       	out	0x15, r24	; 21
 1ec:	83 2f       	mov	r24, r19
 1ee:	8a 95       	dec	r24
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <num+0x74>
while(ch!=0)
{
loc(0x04);
x=ch%10;
data(48+x);
ch=ch/10;
 1f2:	82 2f       	mov	r24, r18
 1f4:	0e 94 9d 03 	call	0x73a	; 0x73a <__udivmodqi4>
 1f8:	28 2f       	mov	r18, r24
 1fa:	03 c0       	rjmp	.+6      	; 0x202 <num+0x88>
data(str[i]);
i++;
}}
void loc(char a)
{
PORTC=((a&0xf0)|0x04);
 1fc:	54 e0       	ldi	r21, 0x04	; 4
 1fe:	3a e1       	ldi	r19, 0x1A	; 26
PORTC=PORTC-0X04;
_delay_us(10);
PORTC=((a<<4)&0xf0|0x04);
 200:	44 e4       	ldi	r20, 0x44	; 68
 void num(char ch)
{
int x;
if(ch==0)
data(48);
while(ch!=0)
 202:	22 23       	and	r18, r18
 204:	79 f6       	brne	.-98     	; 0x1a4 <num+0x2a>
{
loc(0x04);
x=ch%10;
data(48+x);
ch=ch/10;
}}
 206:	08 95       	ret

00000208 <keypad>:

unsigned char keypad()
{
 208:	46 e0       	ldi	r20, 0x06	; 6
 20a:	9a e1       	ldi	r25, 0x1A	; 26
while(PINA==0B11110111);
return '#';
}


PORTB=0B00000101;
 20c:	35 e0       	ldi	r19, 0x05	; 5
{
while(PINA==0B11110111);
return 0;
}

PORTB=0B00000011;
 20e:	23 e0       	ldi	r18, 0x03	; 3

unsigned char keypad()
{
while(1)
{
PORTB=0B00000110;
 210:	48 bb       	out	0x18, r20	; 24
 212:	89 2f       	mov	r24, r25
 214:	8a 95       	dec	r24
 216:	f1 f7       	brne	.-4      	; 0x214 <keypad+0xc>
_delay_us(10);

if(PINA==0b11111110)
 218:	89 b3       	in	r24, 0x19	; 25
 21a:	8e 3f       	cpi	r24, 0xFE	; 254
 21c:	29 f4       	brne	.+10     	; 0x228 <keypad+0x20>
{
while(PINA==0b11111110);
 21e:	89 b3       	in	r24, 0x19	; 25
 220:	8e 3f       	cpi	r24, 0xFE	; 254
 222:	e9 f3       	breq	.-6      	; 0x21e <keypad+0x16>
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	08 95       	ret
return 1;
}
else if(PINA==0B11111101)
 228:	89 b3       	in	r24, 0x19	; 25
 22a:	8d 3f       	cpi	r24, 0xFD	; 253
 22c:	29 f4       	brne	.+10     	; 0x238 <keypad+0x30>
{
while(PINA==0b11111101);
 22e:	89 b3       	in	r24, 0x19	; 25
 230:	8d 3f       	cpi	r24, 0xFD	; 253
 232:	e9 f3       	breq	.-6      	; 0x22e <keypad+0x26>
 234:	84 e0       	ldi	r24, 0x04	; 4
 236:	08 95       	ret
return 4;
}
else if(PINA==0B11111011)
 238:	89 b3       	in	r24, 0x19	; 25
 23a:	8b 3f       	cpi	r24, 0xFB	; 251
 23c:	29 f4       	brne	.+10     	; 0x248 <keypad+0x40>
{
while(PINA==0B11111011);
 23e:	89 b3       	in	r24, 0x19	; 25
 240:	8b 3f       	cpi	r24, 0xFB	; 251
 242:	e9 f3       	breq	.-6      	; 0x23e <keypad+0x36>
 244:	87 e0       	ldi	r24, 0x07	; 7
 246:	08 95       	ret
return 7;
}
else if(PINA==0B11110111)
 248:	89 b3       	in	r24, 0x19	; 25
 24a:	87 3f       	cpi	r24, 0xF7	; 247
 24c:	29 f4       	brne	.+10     	; 0x258 <keypad+0x50>
{
while(PINA==0B11110111);
 24e:	89 b3       	in	r24, 0x19	; 25
 250:	87 3f       	cpi	r24, 0xF7	; 247
 252:	e9 f3       	breq	.-6      	; 0x24e <keypad+0x46>
 254:	83 e2       	ldi	r24, 0x23	; 35
 256:	08 95       	ret
return '#';
}


PORTB=0B00000101;
 258:	38 bb       	out	0x18, r19	; 24
 25a:	89 2f       	mov	r24, r25
 25c:	8a 95       	dec	r24
 25e:	f1 f7       	brne	.-4      	; 0x25c <keypad+0x54>
_delay_us(10);

if(PINA==0b11111110)
 260:	89 b3       	in	r24, 0x19	; 25
 262:	8e 3f       	cpi	r24, 0xFE	; 254
 264:	29 f4       	brne	.+10     	; 0x270 <keypad+0x68>
{
while(PINA==0b11111110);
 266:	89 b3       	in	r24, 0x19	; 25
 268:	8e 3f       	cpi	r24, 0xFE	; 254
 26a:	e9 f3       	breq	.-6      	; 0x266 <keypad+0x5e>
 26c:	82 e0       	ldi	r24, 0x02	; 2
 26e:	08 95       	ret
return 2;
}
else if(PINA==0B11111101)
 270:	89 b3       	in	r24, 0x19	; 25
 272:	8d 3f       	cpi	r24, 0xFD	; 253
 274:	29 f4       	brne	.+10     	; 0x280 <keypad+0x78>
{
while(PINA==0b11111101);
 276:	89 b3       	in	r24, 0x19	; 25
 278:	8d 3f       	cpi	r24, 0xFD	; 253
 27a:	e9 f3       	breq	.-6      	; 0x276 <keypad+0x6e>
 27c:	85 e0       	ldi	r24, 0x05	; 5
 27e:	08 95       	ret
return 5;
}
else if(PINA==0B11111011)
 280:	89 b3       	in	r24, 0x19	; 25
 282:	8b 3f       	cpi	r24, 0xFB	; 251
 284:	29 f4       	brne	.+10     	; 0x290 <keypad+0x88>
{
while(PINA==0B11111011);
 286:	89 b3       	in	r24, 0x19	; 25
 288:	8b 3f       	cpi	r24, 0xFB	; 251
 28a:	e9 f3       	breq	.-6      	; 0x286 <keypad+0x7e>
 28c:	88 e0       	ldi	r24, 0x08	; 8
 28e:	08 95       	ret
return 8;
}
else if(PINA==0B11110111)
 290:	89 b3       	in	r24, 0x19	; 25
 292:	87 3f       	cpi	r24, 0xF7	; 247
 294:	29 f4       	brne	.+10     	; 0x2a0 <keypad+0x98>
{
while(PINA==0B11110111);
 296:	89 b3       	in	r24, 0x19	; 25
 298:	87 3f       	cpi	r24, 0xF7	; 247
 29a:	e9 f3       	breq	.-6      	; 0x296 <keypad+0x8e>
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	08 95       	ret
return 0;
}

PORTB=0B00000011;
 2a0:	28 bb       	out	0x18, r18	; 24
 2a2:	89 2f       	mov	r24, r25
 2a4:	8a 95       	dec	r24
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <keypad+0x9c>
_delay_us(10);

if(PINA==0b11111110)
 2a8:	89 b3       	in	r24, 0x19	; 25
 2aa:	8e 3f       	cpi	r24, 0xFE	; 254
 2ac:	29 f4       	brne	.+10     	; 0x2b8 <keypad+0xb0>
{
while(PINA==0b11111110);
 2ae:	89 b3       	in	r24, 0x19	; 25
 2b0:	8e 3f       	cpi	r24, 0xFE	; 254
 2b2:	e9 f3       	breq	.-6      	; 0x2ae <keypad+0xa6>
 2b4:	83 e0       	ldi	r24, 0x03	; 3
 2b6:	08 95       	ret
return 3;
}
else if(PINA==0B11111101)
 2b8:	89 b3       	in	r24, 0x19	; 25
 2ba:	8d 3f       	cpi	r24, 0xFD	; 253
 2bc:	29 f4       	brne	.+10     	; 0x2c8 <keypad+0xc0>
{
while(PINA==0b11111101);
 2be:	89 b3       	in	r24, 0x19	; 25
 2c0:	8d 3f       	cpi	r24, 0xFD	; 253
 2c2:	e9 f3       	breq	.-6      	; 0x2be <keypad+0xb6>
 2c4:	86 e0       	ldi	r24, 0x06	; 6
 2c6:	08 95       	ret
return 6;
}
else if(PINA==0B11111011)
 2c8:	89 b3       	in	r24, 0x19	; 25
 2ca:	8b 3f       	cpi	r24, 0xFB	; 251
 2cc:	29 f4       	brne	.+10     	; 0x2d8 <keypad+0xd0>
{
while(PINA==0B11111011);
 2ce:	89 b3       	in	r24, 0x19	; 25
 2d0:	8b 3f       	cpi	r24, 0xFB	; 251
 2d2:	e9 f3       	breq	.-6      	; 0x2ce <keypad+0xc6>
 2d4:	89 e0       	ldi	r24, 0x09	; 9
 2d6:	08 95       	ret
return 9;
}
else if(PINA==0B11110111)
 2d8:	89 b3       	in	r24, 0x19	; 25
 2da:	87 3f       	cpi	r24, 0xF7	; 247
 2dc:	09 f0       	breq	.+2      	; 0x2e0 <keypad+0xd8>
 2de:	98 cf       	rjmp	.-208    	; 0x210 <keypad+0x8>
{
while(PINA==0B11110111);
 2e0:	89 b3       	in	r24, 0x19	; 25
 2e2:	87 3f       	cpi	r24, 0xF7	; 247
 2e4:	e9 f3       	breq	.-6      	; 0x2e0 <keypad+0xd8>
 2e6:	8a e2       	ldi	r24, 0x2A	; 42
return '*';
}
}
}
 2e8:	08 95       	ret

000002ea <main>:
void data(char b);
void ini();
void string(char *str);
unsigned char keypad();
void main()
{
 2ea:	2f 92       	push	r2
 2ec:	3f 92       	push	r3
 2ee:	4f 92       	push	r4
 2f0:	5f 92       	push	r5
 2f2:	6f 92       	push	r6
 2f4:	7f 92       	push	r7
 2f6:	8f 92       	push	r8
 2f8:	9f 92       	push	r9
 2fa:	af 92       	push	r10
 2fc:	bf 92       	push	r11
 2fe:	cf 92       	push	r12
 300:	df 92       	push	r13
 302:	ef 92       	push	r14
 304:	ff 92       	push	r15
 306:	0f 93       	push	r16
 308:	1f 93       	push	r17
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
DDRA=0b11110000;
 30e:	80 ef       	ldi	r24, 0xF0	; 240
 310:	8a bb       	out	0x1a, r24	; 26
DDRB=0b11111111;
 312:	8f ef       	ldi	r24, 0xFF	; 255
 314:	87 bb       	out	0x17, r24	; 23
DDRC=0b11111111;
 316:	84 bb       	out	0x14, r24	; 20
PORTA=0b11111111;
 318:	8b bb       	out	0x1b, r24	; 27
ini();
 31a:	0e 94 8e 00 	call	0x11c	; 0x11c <ini>
 31e:	0a e1       	ldi	r16, 0x1A	; 26
data(str[i]);
i++;
}}
void loc(char a)
{
PORTC=((a&0xf0)|0x04);
 320:	64 ec       	ldi	r22, 0xC4	; 196
 322:	d6 2e       	mov	r13, r22
PORTC=PORTC-0X04;
_delay_us(10);
PORTC=((a<<4)&0xf0|0x04);
 324:	54 e1       	ldi	r21, 0x14	; 20
 326:	c5 2e       	mov	r12, r21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 328:	44 ed       	ldi	r20, 0xD4	; 212
 32a:	44 2e       	mov	r4, r20
 32c:	38 ec       	ldi	r19, 0xC8	; 200
 32e:	23 2e       	mov	r2, r19
 330:	31 2c       	mov	r3, r1
data(str[i]);
i++;
}}
void loc(char a)
{
PORTC=((a&0xf0)|0x04);
 332:	20 e1       	ldi	r18, 0x10	; 16
 334:	a2 2e       	mov	r10, r18
 336:	27 e2       	ldi	r18, 0x27	; 39
 338:	b2 2e       	mov	r11, r18
 33a:	84 e8       	ldi	r24, 0x84	; 132
 33c:	85 bb       	out	0x15, r24	; 21
PORTC=PORTC-0X04;
 33e:	85 b3       	in	r24, 0x15	; 21
 340:	84 50       	subi	r24, 0x04	; 4
 342:	85 bb       	out	0x15, r24	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 344:	80 2f       	mov	r24, r16
 346:	8a 95       	dec	r24
 348:	f1 f7       	brne	.-4      	; 0x346 <main+0x5c>
_delay_us(10);
PORTC=((a<<4)&0xf0|0x04);
 34a:	14 e0       	ldi	r17, 0x04	; 4
 34c:	15 bb       	out	0x15, r17	; 21
PORTC=PORTC-0X04;
 34e:	85 b3       	in	r24, 0x15	; 21
 350:	84 50       	subi	r24, 0x04	; 4
 352:	85 bb       	out	0x15, r24	; 21
 354:	80 2f       	mov	r24, r16
 356:	8a 95       	dec	r24
 358:	f1 f7       	brne	.-4      	; 0x356 <main+0x6c>
ini();
while(1)
{
int i=4;
loc(0X80);
string("ENTER THE PIN :-");
 35a:	80 e6       	ldi	r24, 0x60	; 96
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 49 00 	call	0x92	; 0x92 <string>

char x=keypad();
 362:	0e 94 04 01 	call	0x208	; 0x208 <keypad>
 366:	58 2e       	mov	r5, r24
data(str[i]);
i++;
}}
void loc(char a)
{
PORTC=((a&0xf0)|0x04);
 368:	d5 ba       	out	0x15, r13	; 21
PORTC=PORTC-0X04;
 36a:	85 b3       	in	r24, 0x15	; 21
 36c:	84 50       	subi	r24, 0x04	; 4
 36e:	85 bb       	out	0x15, r24	; 21
 370:	80 2f       	mov	r24, r16
 372:	8a 95       	dec	r24
 374:	f1 f7       	brne	.-4      	; 0x372 <main+0x88>
_delay_us(10);
PORTC=((a<<4)&0xf0|0x04);
 376:	15 bb       	out	0x15, r17	; 21
PORTC=PORTC-0X04;
 378:	85 b3       	in	r24, 0x15	; 21
 37a:	84 50       	subi	r24, 0x04	; 4
 37c:	85 bb       	out	0x15, r24	; 21
 37e:	80 2f       	mov	r24, r16
 380:	8a 95       	dec	r24
 382:	f1 f7       	brne	.-4      	; 0x380 <main+0x96>
loc(0X80);
string("ENTER THE PIN :-");

char x=keypad();
loc(0xc0);
num(x);
 384:	85 2d       	mov	r24, r5
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 bd 00 	call	0x17a	; 0x17a <num>
char y=keypad();
 38c:	0e 94 04 01 	call	0x208	; 0x208 <keypad>
 390:	68 2e       	mov	r6, r24
data(str[i]);
i++;
}}
void loc(char a)
{
PORTC=((a&0xf0)|0x04);
 392:	d5 ba       	out	0x15, r13	; 21
PORTC=PORTC-0X04;
 394:	85 b3       	in	r24, 0x15	; 21
 396:	84 50       	subi	r24, 0x04	; 4
 398:	85 bb       	out	0x15, r24	; 21
 39a:	80 2f       	mov	r24, r16
 39c:	8a 95       	dec	r24
 39e:	f1 f7       	brne	.-4      	; 0x39c <main+0xb2>
_delay_us(10);
PORTC=((a<<4)&0xf0|0x04);
 3a0:	c5 ba       	out	0x15, r12	; 21
PORTC=PORTC-0X04;
 3a2:	85 b3       	in	r24, 0x15	; 21
 3a4:	84 50       	subi	r24, 0x04	; 4
 3a6:	85 bb       	out	0x15, r24	; 21
 3a8:	80 2f       	mov	r24, r16
 3aa:	8a 95       	dec	r24
 3ac:	f1 f7       	brne	.-4      	; 0x3aa <main+0xc0>
char x=keypad();
loc(0xc0);
num(x);
char y=keypad();
loc(0xc1);
num(y);
 3ae:	86 2d       	mov	r24, r6
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	0e 94 bd 00 	call	0x17a	; 0x17a <num>
char z=keypad();
 3b6:	0e 94 04 01 	call	0x208	; 0x208 <keypad>
 3ba:	78 2e       	mov	r7, r24
data(str[i]);
i++;
}}
void loc(char a)
{
PORTC=((a&0xf0)|0x04);
 3bc:	d5 ba       	out	0x15, r13	; 21
PORTC=PORTC-0X04;
 3be:	85 b3       	in	r24, 0x15	; 21
 3c0:	84 50       	subi	r24, 0x04	; 4
 3c2:	85 bb       	out	0x15, r24	; 21
 3c4:	80 2f       	mov	r24, r16
 3c6:	8a 95       	dec	r24
 3c8:	f1 f7       	brne	.-4      	; 0x3c6 <main+0xdc>
_delay_us(10);
PORTC=((a<<4)&0xf0|0x04);
 3ca:	84 e2       	ldi	r24, 0x24	; 36
 3cc:	85 bb       	out	0x15, r24	; 21
PORTC=PORTC-0X04;
 3ce:	85 b3       	in	r24, 0x15	; 21
 3d0:	84 50       	subi	r24, 0x04	; 4
 3d2:	85 bb       	out	0x15, r24	; 21
 3d4:	80 2f       	mov	r24, r16
 3d6:	8a 95       	dec	r24
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <main+0xec>
char y=keypad();
loc(0xc1);
num(y);
char z=keypad();
loc(0xc2);
num(z);
 3da:	87 2d       	mov	r24, r7
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	0e 94 bd 00 	call	0x17a	; 0x17a <num>
char q=keypad();
 3e2:	0e 94 04 01 	call	0x208	; 0x208 <keypad>
 3e6:	88 2e       	mov	r8, r24
data(str[i]);
i++;
}}
void loc(char a)
{
PORTC=((a&0xf0)|0x04);
 3e8:	d5 ba       	out	0x15, r13	; 21
PORTC=PORTC-0X04;
 3ea:	85 b3       	in	r24, 0x15	; 21
 3ec:	84 50       	subi	r24, 0x04	; 4
 3ee:	85 bb       	out	0x15, r24	; 21
 3f0:	80 2f       	mov	r24, r16
 3f2:	8a 95       	dec	r24
 3f4:	f1 f7       	brne	.-4      	; 0x3f2 <main+0x108>
_delay_us(10);
PORTC=((a<<4)&0xf0|0x04);
 3f6:	84 e3       	ldi	r24, 0x34	; 52
 3f8:	85 bb       	out	0x15, r24	; 21
PORTC=PORTC-0X04;
 3fa:	85 b3       	in	r24, 0x15	; 21
 3fc:	84 50       	subi	r24, 0x04	; 4
 3fe:	85 bb       	out	0x15, r24	; 21
 400:	80 2f       	mov	r24, r16
 402:	8a 95       	dec	r24
 404:	f1 f7       	brne	.-4      	; 0x402 <main+0x118>
char z=keypad();
loc(0xc2);
num(z);
char q=keypad();
loc(0xc3);
num(q);
 406:	88 2d       	mov	r24, r8
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	0e 94 bd 00 	call	0x17a	; 0x17a <num>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 40e:	20 e2       	ldi	r18, 0x20	; 32
 410:	3e e4       	ldi	r19, 0x4E	; 78
 412:	c9 01       	movw	r24, r18
 414:	01 97       	sbiw	r24, 0x01	; 1
 416:	f1 f7       	brne	.-4      	; 0x414 <main+0x12a>
data(str[i]);
i++;
}}
void loc(char a)
{
PORTC=((a&0xf0)|0x04);
 418:	15 bb       	out	0x15, r17	; 21
PORTC=PORTC-0X04;
 41a:	85 b3       	in	r24, 0x15	; 21
 41c:	84 50       	subi	r24, 0x04	; 4
 41e:	85 bb       	out	0x15, r24	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 420:	80 2f       	mov	r24, r16
 422:	8a 95       	dec	r24
 424:	f1 f7       	brne	.-4      	; 0x422 <main+0x138>
_delay_us(10);
PORTC=((a<<4)&0xf0|0x04);
 426:	c5 ba       	out	0x15, r12	; 21
PORTC=PORTC-0X04;
 428:	85 b3       	in	r24, 0x15	; 21
 42a:	84 50       	subi	r24, 0x04	; 4
 42c:	85 bb       	out	0x15, r24	; 21
 42e:	80 2f       	mov	r24, r16
 430:	8a 95       	dec	r24
 432:	f1 f7       	brne	.-4      	; 0x430 <main+0x146>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 434:	c9 01       	movw	r24, r18
 436:	01 97       	sbiw	r24, 0x01	; 1
 438:	f1 f7       	brne	.-4      	; 0x436 <main+0x14c>
 43a:	94 e0       	ldi	r25, 0x04	; 4
 43c:	e9 2e       	mov	r14, r25
 43e:	f1 2c       	mov	r15, r1
data(str[i]);
i++;
}}
void loc(char a)
{
PORTC=((a&0xf0)|0x04);
 440:	84 e8       	ldi	r24, 0x84	; 132
 442:	98 2e       	mov	r9, r24
 444:	30 c1       	rjmp	.+608    	; 0x6a6 <__stack+0x247>
_delay_ms(10);
loc(0x01);
_delay_ms(10);
while(((x!=1)|(y!=1)|(z!=1)|(q!=0))&&(i<7))
{
if(i<5)
 446:	44 e0       	ldi	r20, 0x04	; 4
 448:	e4 16       	cp	r14, r20
 44a:	f1 04       	cpc	r15, r1
 44c:	09 f0       	breq	.+2      	; 0x450 <main+0x166>
 44e:	3f c0       	rjmp	.+126    	; 0x4ce <__stack+0x6f>
data(str[i]);
i++;
}}
void loc(char a)
{
PORTC=((a&0xf0)|0x04);
 450:	95 ba       	out	0x15, r9	; 21
PORTC=PORTC-0X04;
 452:	85 b3       	in	r24, 0x15	; 21
 454:	84 50       	subi	r24, 0x04	; 4
 456:	85 bb       	out	0x15, r24	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 458:	80 2f       	mov	r24, r16
 45a:	8a 95       	dec	r24
 45c:	f1 f7       	brne	.-4      	; 0x45a <main+0x170>
_delay_us(10);
PORTC=((a<<4)&0xf0|0x04);
 45e:	84 e5       	ldi	r24, 0x54	; 84
 460:	85 bb       	out	0x15, r24	; 21
PORTC=PORTC-0X04;
 462:	85 b3       	in	r24, 0x15	; 21
 464:	84 50       	subi	r24, 0x04	; 4
 466:	85 bb       	out	0x15, r24	; 21
 468:	80 2f       	mov	r24, r16
 46a:	8a 95       	dec	r24
 46c:	f1 f7       	brne	.-4      	; 0x46a <__stack+0xb>
while(((x!=1)|(y!=1)|(z!=1)|(q!=0))&&(i<7))
{
if(i<5)
{
loc(0x85);
string("WRONG PIN");
 46e:	81 e7       	ldi	r24, 0x71	; 113
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	0e 94 49 00 	call	0x92	; 0x92 <string>
data(str[i]);
i++;
}}
void loc(char a)
{
PORTC=((a&0xf0)|0x04);
 476:	d5 ba       	out	0x15, r13	; 21
PORTC=PORTC-0X04;
 478:	85 b3       	in	r24, 0x15	; 21
 47a:	84 50       	subi	r24, 0x04	; 4
 47c:	85 bb       	out	0x15, r24	; 21
 47e:	80 2f       	mov	r24, r16
 480:	8a 95       	dec	r24
 482:	f1 f7       	brne	.-4      	; 0x480 <__stack+0x21>
_delay_us(10);
PORTC=((a<<4)&0xf0|0x04);
 484:	84 e4       	ldi	r24, 0x44	; 68
 486:	85 bb       	out	0x15, r24	; 21
PORTC=PORTC-0X04;
 488:	85 b3       	in	r24, 0x15	; 21
 48a:	84 50       	subi	r24, 0x04	; 4
 48c:	85 bb       	out	0x15, r24	; 21
 48e:	80 2f       	mov	r24, r16
 490:	8a 95       	dec	r24
 492:	f1 f7       	brne	.-4      	; 0x490 <__stack+0x31>
if(i<5)
{
loc(0x85);
string("WRONG PIN");
loc(0xc4);
string("TRY AGAIN");
 494:	8b e7       	ldi	r24, 0x7B	; 123
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	0e 94 49 00 	call	0x92	; 0x92 <string>
 49c:	88 ee       	ldi	r24, 0xE8	; 232
 49e:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 4a0:	f1 01       	movw	r30, r2
 4a2:	31 97       	sbiw	r30, 0x01	; 1
 4a4:	f1 f7       	brne	.-4      	; 0x4a2 <__stack+0x43>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4a8:	d9 f7       	brne	.-10     	; 0x4a0 <__stack+0x41>
data(str[i]);
i++;
}}
void loc(char a)
{
PORTC=((a&0xf0)|0x04);
 4aa:	15 bb       	out	0x15, r17	; 21
PORTC=PORTC-0X04;
 4ac:	85 b3       	in	r24, 0x15	; 21
 4ae:	84 50       	subi	r24, 0x04	; 4
 4b0:	85 bb       	out	0x15, r24	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 4b2:	80 2f       	mov	r24, r16
 4b4:	8a 95       	dec	r24
 4b6:	f1 f7       	brne	.-4      	; 0x4b4 <__stack+0x55>
_delay_us(10);
PORTC=((a<<4)&0xf0|0x04);
 4b8:	c5 ba       	out	0x15, r12	; 21
PORTC=PORTC-0X04;
 4ba:	85 b3       	in	r24, 0x15	; 21
 4bc:	84 50       	subi	r24, 0x04	; 4
 4be:	85 bb       	out	0x15, r24	; 21
 4c0:	80 2f       	mov	r24, r16
 4c2:	8a 95       	dec	r24
 4c4:	f1 f7       	brne	.-4      	; 0x4c2 <__stack+0x63>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 4c6:	c5 01       	movw	r24, r10
 4c8:	01 97       	sbiw	r24, 0x01	; 1
 4ca:	f1 f7       	brne	.-4      	; 0x4c8 <__stack+0x69>
 4cc:	74 c0       	rjmp	.+232    	; 0x5b6 <__stack+0x157>
string("TRY AGAIN");
_delay_ms(100);
loc(0x01);
_delay_ms(5);
}
else if(i>4&&i<6)
 4ce:	85 e0       	ldi	r24, 0x05	; 5
 4d0:	e8 16       	cp	r14, r24
 4d2:	f1 04       	cpc	r15, r1
 4d4:	09 f0       	breq	.+2      	; 0x4d8 <__stack+0x79>
 4d6:	56 c0       	rjmp	.+172    	; 0x584 <__stack+0x125>
 4d8:	cd e1       	ldi	r28, 0x1D	; 29
 4da:	d0 e0       	ldi	r29, 0x00	; 0
data(str[i]);
i++;
}}
void loc(char a)
{
PORTC=((a&0xf0)|0x04);
 4dc:	95 ba       	out	0x15, r9	; 21
PORTC=PORTC-0X04;
 4de:	85 b3       	in	r24, 0x15	; 21
 4e0:	84 50       	subi	r24, 0x04	; 4
 4e2:	85 bb       	out	0x15, r24	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 4e4:	80 2f       	mov	r24, r16
 4e6:	8a 95       	dec	r24
 4e8:	f1 f7       	brne	.-4      	; 0x4e6 <__stack+0x87>
_delay_us(10);
PORTC=((a<<4)&0xf0|0x04);
 4ea:	15 bb       	out	0x15, r17	; 21
PORTC=PORTC-0X04;
 4ec:	85 b3       	in	r24, 0x15	; 21
 4ee:	84 50       	subi	r24, 0x04	; 4
 4f0:	85 bb       	out	0x15, r24	; 21
 4f2:	80 2f       	mov	r24, r16
 4f4:	8a 95       	dec	r24
 4f6:	f1 f7       	brne	.-4      	; 0x4f4 <__stack+0x95>
{

for(int j=29;j>=0;j--)
{
loc(0x80);
string("WAIT 30 SECONDS");
 4f8:	85 e8       	ldi	r24, 0x85	; 133
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	0e 94 49 00 	call	0x92	; 0x92 <string>
data(str[i]);
i++;
}}
void loc(char a)
{
PORTC=((a&0xf0)|0x04);
 500:	d5 ba       	out	0x15, r13	; 21
PORTC=PORTC-0X04;
 502:	85 b3       	in	r24, 0x15	; 21
 504:	84 50       	subi	r24, 0x04	; 4
 506:	85 bb       	out	0x15, r24	; 21
 508:	80 2f       	mov	r24, r16
 50a:	8a 95       	dec	r24
 50c:	f1 f7       	brne	.-4      	; 0x50a <__stack+0xab>
_delay_us(10);
PORTC=((a<<4)&0xf0|0x04);
 50e:	15 bb       	out	0x15, r17	; 21
PORTC=PORTC-0X04;
 510:	85 b3       	in	r24, 0x15	; 21
 512:	84 50       	subi	r24, 0x04	; 4
 514:	85 bb       	out	0x15, r24	; 21
 516:	80 2f       	mov	r24, r16
 518:	8a 95       	dec	r24
 51a:	f1 f7       	brne	.-4      	; 0x518 <__stack+0xb9>
for(int j=29;j>=0;j--)
{
loc(0x80);
string("WAIT 30 SECONDS");
loc(0xc0);
string("TIME LEFT :-");
 51c:	85 e9       	ldi	r24, 0x95	; 149
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	0e 94 49 00 	call	0x92	; 0x92 <string>
data(str[i]);
i++;
}}
void loc(char a)
{
PORTC=((a&0xf0)|0x04);
 524:	d5 ba       	out	0x15, r13	; 21
PORTC=PORTC-0X04;
 526:	85 b3       	in	r24, 0x15	; 21
 528:	84 50       	subi	r24, 0x04	; 4
 52a:	85 bb       	out	0x15, r24	; 21
 52c:	80 2f       	mov	r24, r16
 52e:	8a 95       	dec	r24
 530:	f1 f7       	brne	.-4      	; 0x52e <__stack+0xcf>
_delay_us(10);
PORTC=((a<<4)&0xf0|0x04);
 532:	45 ba       	out	0x15, r4	; 21
PORTC=PORTC-0X04;
 534:	85 b3       	in	r24, 0x15	; 21
 536:	84 50       	subi	r24, 0x04	; 4
 538:	85 bb       	out	0x15, r24	; 21
 53a:	80 2f       	mov	r24, r16
 53c:	8a 95       	dec	r24
 53e:	f1 f7       	brne	.-4      	; 0x53c <__stack+0xdd>
loc(0x80);
string("WAIT 30 SECONDS");
loc(0xc0);
string("TIME LEFT :-");
loc(0xcd);
num(j);
 540:	ce 01       	movw	r24, r28
 542:	0e 94 bd 00 	call	0x17a	; 0x17a <num>
 546:	88 ee       	ldi	r24, 0xE8	; 232
 548:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 54a:	f1 01       	movw	r30, r2
 54c:	31 97       	sbiw	r30, 0x01	; 1
 54e:	f1 f7       	brne	.-4      	; 0x54c <__stack+0xed>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 550:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 552:	d9 f7       	brne	.-10     	; 0x54a <__stack+0xeb>
data(str[i]);
i++;
}}
void loc(char a)
{
PORTC=((a&0xf0)|0x04);
 554:	15 bb       	out	0x15, r17	; 21
PORTC=PORTC-0X04;
 556:	85 b3       	in	r24, 0x15	; 21
 558:	84 50       	subi	r24, 0x04	; 4
 55a:	85 bb       	out	0x15, r24	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 55c:	80 2f       	mov	r24, r16
 55e:	8a 95       	dec	r24
 560:	f1 f7       	brne	.-4      	; 0x55e <__stack+0xff>
_delay_us(10);
PORTC=((a<<4)&0xf0|0x04);
 562:	c5 ba       	out	0x15, r12	; 21
PORTC=PORTC-0X04;
 564:	85 b3       	in	r24, 0x15	; 21
 566:	84 50       	subi	r24, 0x04	; 4
 568:	85 bb       	out	0x15, r24	; 21
 56a:	80 2f       	mov	r24, r16
 56c:	8a 95       	dec	r24
 56e:	f1 f7       	brne	.-4      	; 0x56c <__stack+0x10d>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 570:	c5 01       	movw	r24, r10
 572:	01 97       	sbiw	r24, 0x01	; 1
 574:	f1 f7       	brne	.-4      	; 0x572 <__stack+0x113>
_delay_ms(5);
}
else if(i>4&&i<6)
{

for(int j=29;j>=0;j--)
 576:	21 97       	sbiw	r28, 0x01	; 1
 578:	9f ef       	ldi	r25, 0xFF	; 255
 57a:	cf 3f       	cpi	r28, 0xFF	; 255
 57c:	d9 07       	cpc	r29, r25
 57e:	09 f0       	breq	.+2      	; 0x582 <__stack+0x123>
 580:	ad cf       	rjmp	.-166    	; 0x4dc <__stack+0x7d>
 582:	19 c0       	rjmp	.+50     	; 0x5b6 <__stack+0x157>
data(str[i]);
i++;
}}
void loc(char a)
{
PORTC=((a&0xf0)|0x04);
 584:	84 e0       	ldi	r24, 0x04	; 4
 586:	85 bb       	out	0x15, r24	; 21
PORTC=PORTC-0X04;
 588:	85 b3       	in	r24, 0x15	; 21
 58a:	84 50       	subi	r24, 0x04	; 4
 58c:	85 bb       	out	0x15, r24	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 58e:	9a e1       	ldi	r25, 0x1A	; 26
 590:	89 2f       	mov	r24, r25
 592:	8a 95       	dec	r24
 594:	f1 f7       	brne	.-4      	; 0x592 <__stack+0x133>
_delay_us(10);
PORTC=((a<<4)&0xf0|0x04);
 596:	84 e1       	ldi	r24, 0x14	; 20
 598:	85 bb       	out	0x15, r24	; 21
PORTC=PORTC-0X04;
 59a:	85 b3       	in	r24, 0x15	; 21
 59c:	84 50       	subi	r24, 0x04	; 4
 59e:	85 bb       	out	0x15, r24	; 21
 5a0:	9a 95       	dec	r25
 5a2:	f1 f7       	brne	.-4      	; 0x5a0 <__stack+0x141>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 5a4:	80 e1       	ldi	r24, 0x10	; 16
 5a6:	97 e2       	ldi	r25, 0x27	; 39
 5a8:	01 97       	sbiw	r24, 0x01	; 1
 5aa:	f1 f7       	brne	.-4      	; 0x5a8 <__stack+0x149>
}
else if(i>5)
{
loc(0x01);
_delay_ms(5);
string("SYSTEM BLOCKED");
 5ac:	82 ea       	ldi	r24, 0xA2	; 162
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	0e 94 49 00 	call	0x92	; 0x92 <string>
 5b4:	ff cf       	rjmp	.-2      	; 0x5b4 <__stack+0x155>
data(str[i]);
i++;
}}
void loc(char a)
{
PORTC=((a&0xf0)|0x04);
 5b6:	95 ba       	out	0x15, r9	; 21
PORTC=PORTC-0X04;
 5b8:	85 b3       	in	r24, 0x15	; 21
 5ba:	84 50       	subi	r24, 0x04	; 4
 5bc:	85 bb       	out	0x15, r24	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 5be:	80 2f       	mov	r24, r16
 5c0:	8a 95       	dec	r24
 5c2:	f1 f7       	brne	.-4      	; 0x5c0 <__stack+0x161>
_delay_us(10);
PORTC=((a<<4)&0xf0|0x04);
 5c4:	15 bb       	out	0x15, r17	; 21
PORTC=PORTC-0X04;
 5c6:	85 b3       	in	r24, 0x15	; 21
 5c8:	84 50       	subi	r24, 0x04	; 4
 5ca:	85 bb       	out	0x15, r24	; 21
 5cc:	80 2f       	mov	r24, r16
 5ce:	8a 95       	dec	r24
 5d0:	f1 f7       	brne	.-4      	; 0x5ce <__stack+0x16f>
while(1)
{
}
}
loc(0X80);
string("ENTER THE PIN :-");
 5d2:	80 e6       	ldi	r24, 0x60	; 96
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	0e 94 49 00 	call	0x92	; 0x92 <string>
i++;
 5da:	08 94       	sec
 5dc:	e1 1c       	adc	r14, r1
 5de:	f1 1c       	adc	r15, r1
char x=keypad();
 5e0:	0e 94 04 01 	call	0x208	; 0x208 <keypad>
data(str[i]);
i++;
}}
void loc(char a)
{
PORTC=((a&0xf0)|0x04);
 5e4:	d5 ba       	out	0x15, r13	; 21
PORTC=PORTC-0X04;
 5e6:	95 b3       	in	r25, 0x15	; 21
 5e8:	94 50       	subi	r25, 0x04	; 4
 5ea:	95 bb       	out	0x15, r25	; 21
 5ec:	90 2f       	mov	r25, r16
 5ee:	9a 95       	dec	r25
 5f0:	f1 f7       	brne	.-4      	; 0x5ee <__stack+0x18f>
_delay_us(10);
PORTC=((a<<4)&0xf0|0x04);
 5f2:	15 bb       	out	0x15, r17	; 21
PORTC=PORTC-0X04;
 5f4:	95 b3       	in	r25, 0x15	; 21
 5f6:	94 50       	subi	r25, 0x04	; 4
 5f8:	95 bb       	out	0x15, r25	; 21
 5fa:	90 2f       	mov	r25, r16
 5fc:	9a 95       	dec	r25
 5fe:	f1 f7       	brne	.-4      	; 0x5fc <__stack+0x19d>
loc(0X80);
string("ENTER THE PIN :-");
i++;
char x=keypad();
loc(0xc0);
num(x);
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	0e 94 bd 00 	call	0x17a	; 0x17a <num>
char y=keypad();
 606:	0e 94 04 01 	call	0x208	; 0x208 <keypad>
data(str[i]);
i++;
}}
void loc(char a)
{
PORTC=((a&0xf0)|0x04);
 60a:	d5 ba       	out	0x15, r13	; 21
PORTC=PORTC-0X04;
 60c:	95 b3       	in	r25, 0x15	; 21
 60e:	94 50       	subi	r25, 0x04	; 4
 610:	95 bb       	out	0x15, r25	; 21
 612:	90 2f       	mov	r25, r16
 614:	9a 95       	dec	r25
 616:	f1 f7       	brne	.-4      	; 0x614 <__stack+0x1b5>
_delay_us(10);
PORTC=((a<<4)&0xf0|0x04);
 618:	c5 ba       	out	0x15, r12	; 21
PORTC=PORTC-0X04;
 61a:	95 b3       	in	r25, 0x15	; 21
 61c:	94 50       	subi	r25, 0x04	; 4
 61e:	95 bb       	out	0x15, r25	; 21
 620:	90 2f       	mov	r25, r16
 622:	9a 95       	dec	r25
 624:	f1 f7       	brne	.-4      	; 0x622 <__stack+0x1c3>
char x=keypad();
loc(0xc0);
num(x);
char y=keypad();
loc(0xc1);
num(y);
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	0e 94 bd 00 	call	0x17a	; 0x17a <num>
char z=keypad();
 62c:	0e 94 04 01 	call	0x208	; 0x208 <keypad>
data(str[i]);
i++;
}}
void loc(char a)
{
PORTC=((a&0xf0)|0x04);
 630:	d5 ba       	out	0x15, r13	; 21
PORTC=PORTC-0X04;
 632:	95 b3       	in	r25, 0x15	; 21
 634:	94 50       	subi	r25, 0x04	; 4
 636:	95 bb       	out	0x15, r25	; 21
 638:	90 2f       	mov	r25, r16
 63a:	9a 95       	dec	r25
 63c:	f1 f7       	brne	.-4      	; 0x63a <__stack+0x1db>
_delay_us(10);
PORTC=((a<<4)&0xf0|0x04);
 63e:	94 e2       	ldi	r25, 0x24	; 36
 640:	95 bb       	out	0x15, r25	; 21
PORTC=PORTC-0X04;
 642:	95 b3       	in	r25, 0x15	; 21
 644:	94 50       	subi	r25, 0x04	; 4
 646:	95 bb       	out	0x15, r25	; 21
 648:	90 2f       	mov	r25, r16
 64a:	9a 95       	dec	r25
 64c:	f1 f7       	brne	.-4      	; 0x64a <__stack+0x1eb>
char y=keypad();
loc(0xc1);
num(y);
char z=keypad();
loc(0xc2);
num(z);
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	0e 94 bd 00 	call	0x17a	; 0x17a <num>
char q=keypad();
 654:	0e 94 04 01 	call	0x208	; 0x208 <keypad>
data(str[i]);
i++;
}}
void loc(char a)
{
PORTC=((a&0xf0)|0x04);
 658:	d5 ba       	out	0x15, r13	; 21
PORTC=PORTC-0X04;
 65a:	95 b3       	in	r25, 0x15	; 21
 65c:	94 50       	subi	r25, 0x04	; 4
 65e:	95 bb       	out	0x15, r25	; 21
 660:	90 2f       	mov	r25, r16
 662:	9a 95       	dec	r25
 664:	f1 f7       	brne	.-4      	; 0x662 <__stack+0x203>
_delay_us(10);
PORTC=((a<<4)&0xf0|0x04);
 666:	94 e3       	ldi	r25, 0x34	; 52
 668:	95 bb       	out	0x15, r25	; 21
PORTC=PORTC-0X04;
 66a:	95 b3       	in	r25, 0x15	; 21
 66c:	94 50       	subi	r25, 0x04	; 4
 66e:	95 bb       	out	0x15, r25	; 21
 670:	90 2f       	mov	r25, r16
 672:	9a 95       	dec	r25
 674:	f1 f7       	brne	.-4      	; 0x672 <__stack+0x213>
char z=keypad();
loc(0xc2);
num(z);
char q=keypad();
loc(0xc3);
num(q);
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	0e 94 bd 00 	call	0x17a	; 0x17a <num>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 67c:	80 e2       	ldi	r24, 0x20	; 32
 67e:	9e e4       	ldi	r25, 0x4E	; 78
 680:	01 97       	sbiw	r24, 0x01	; 1
 682:	f1 f7       	brne	.-4      	; 0x680 <__stack+0x221>
data(str[i]);
i++;
}}
void loc(char a)
{
PORTC=((a&0xf0)|0x04);
 684:	15 bb       	out	0x15, r17	; 21
PORTC=PORTC-0X04;
 686:	85 b3       	in	r24, 0x15	; 21
 688:	84 50       	subi	r24, 0x04	; 4
 68a:	85 bb       	out	0x15, r24	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 68c:	80 2f       	mov	r24, r16
 68e:	8a 95       	dec	r24
 690:	f1 f7       	brne	.-4      	; 0x68e <__stack+0x22f>
_delay_us(10);
PORTC=((a<<4)&0xf0|0x04);
 692:	c5 ba       	out	0x15, r12	; 21
PORTC=PORTC-0X04;
 694:	85 b3       	in	r24, 0x15	; 21
 696:	84 50       	subi	r24, 0x04	; 4
 698:	85 bb       	out	0x15, r24	; 21
 69a:	80 2f       	mov	r24, r16
 69c:	8a 95       	dec	r24
 69e:	f1 f7       	brne	.-4      	; 0x69c <__stack+0x23d>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 6a0:	c5 01       	movw	r24, r10
 6a2:	01 97       	sbiw	r24, 0x01	; 1
 6a4:	f1 f7       	brne	.-4      	; 0x6a2 <__stack+0x243>
loc(0xc3);
num(q);
_delay_ms(10);
loc(0x01);
_delay_ms(10);
while(((x!=1)|(y!=1)|(z!=1)|(q!=0))&&(i<7))
 6a6:	20 e0       	ldi	r18, 0x00	; 0
 6a8:	30 e0       	ldi	r19, 0x00	; 0
 6aa:	88 20       	and	r8, r8
 6ac:	11 f0       	breq	.+4      	; 0x6b2 <__stack+0x253>
 6ae:	21 e0       	ldi	r18, 0x01	; 1
 6b0:	30 e0       	ldi	r19, 0x00	; 0
 6b2:	80 e0       	ldi	r24, 0x00	; 0
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	41 e0       	ldi	r20, 0x01	; 1
 6b8:	74 16       	cp	r7, r20
 6ba:	11 f0       	breq	.+4      	; 0x6c0 <__stack+0x261>
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	28 2b       	or	r18, r24
 6c2:	39 2b       	or	r19, r25
 6c4:	80 e0       	ldi	r24, 0x00	; 0
 6c6:	91 e0       	ldi	r25, 0x01	; 1
 6c8:	59 12       	cpse	r5, r25
 6ca:	81 e0       	ldi	r24, 0x01	; 1
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	41 e0       	ldi	r20, 0x01	; 1
 6d0:	64 12       	cpse	r6, r20
 6d2:	91 e0       	ldi	r25, 0x01	; 1
 6d4:	89 2b       	or	r24, r25
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	28 2b       	or	r18, r24
 6da:	39 2b       	or	r19, r25
 6dc:	23 2b       	or	r18, r19
 6de:	29 f0       	breq	.+10     	; 0x6ea <__stack+0x28b>
 6e0:	87 e0       	ldi	r24, 0x07	; 7
 6e2:	e8 16       	cp	r14, r24
 6e4:	f1 04       	cpc	r15, r1
 6e6:	09 f0       	breq	.+2      	; 0x6ea <__stack+0x28b>
 6e8:	ae ce       	rjmp	.-676    	; 0x446 <main+0x15c>
data(str[i]);
i++;
}}
void loc(char a)
{
PORTC=((a&0xf0)|0x04);
 6ea:	84 e8       	ldi	r24, 0x84	; 132
 6ec:	85 bb       	out	0x15, r24	; 21
PORTC=PORTC-0X04;
 6ee:	85 b3       	in	r24, 0x15	; 21
 6f0:	84 50       	subi	r24, 0x04	; 4
 6f2:	85 bb       	out	0x15, r24	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 6f4:	80 2f       	mov	r24, r16
 6f6:	8a 95       	dec	r24
 6f8:	f1 f7       	brne	.-4      	; 0x6f6 <__stack+0x297>
_delay_us(10);
PORTC=((a<<4)&0xf0|0x04);
 6fa:	84 e5       	ldi	r24, 0x54	; 84
 6fc:	85 bb       	out	0x15, r24	; 21
PORTC=PORTC-0X04;
 6fe:	85 b3       	in	r24, 0x15	; 21
 700:	84 50       	subi	r24, 0x04	; 4
 702:	85 bb       	out	0x15, r24	; 21
 704:	80 2f       	mov	r24, r16
 706:	8a 95       	dec	r24
 708:	f1 f7       	brne	.-4      	; 0x706 <__stack+0x2a7>
_delay_ms(5);


}
loc(0x85);
string("WELCOME");
 70a:	81 eb       	ldi	r24, 0xB1	; 177
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	0e 94 49 00 	call	0x92	; 0x92 <string>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 712:	80 ed       	ldi	r24, 0xD0	; 208
 714:	97 e0       	ldi	r25, 0x07	; 7
 716:	01 97       	sbiw	r24, 0x01	; 1
 718:	f1 f7       	brne	.-4      	; 0x716 <__stack+0x2b7>
data(str[i]);
i++;
}}
void loc(char a)
{
PORTC=((a&0xf0)|0x04);
 71a:	84 e0       	ldi	r24, 0x04	; 4
 71c:	85 bb       	out	0x15, r24	; 21
PORTC=PORTC-0X04;
 71e:	85 b3       	in	r24, 0x15	; 21
 720:	84 50       	subi	r24, 0x04	; 4
 722:	85 bb       	out	0x15, r24	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 724:	80 2f       	mov	r24, r16
 726:	8a 95       	dec	r24
 728:	f1 f7       	brne	.-4      	; 0x726 <__stack+0x2c7>
_delay_us(10);
PORTC=((a<<4)&0xf0|0x04);
 72a:	c5 ba       	out	0x15, r12	; 21
PORTC=PORTC-0X04;
 72c:	85 b3       	in	r24, 0x15	; 21
 72e:	84 50       	subi	r24, 0x04	; 4
 730:	85 bb       	out	0x15, r24	; 21
 732:	80 2f       	mov	r24, r16
 734:	8a 95       	dec	r24
 736:	f1 f7       	brne	.-4      	; 0x734 <__stack+0x2d5>
 738:	00 ce       	rjmp	.-1024   	; 0x33a <main+0x50>

0000073a <__udivmodqi4>:
 73a:	99 1b       	sub	r25, r25
 73c:	79 e0       	ldi	r23, 0x09	; 9
 73e:	04 c0       	rjmp	.+8      	; 0x748 <__udivmodqi4_ep>

00000740 <__udivmodqi4_loop>:
 740:	99 1f       	adc	r25, r25
 742:	96 17       	cp	r25, r22
 744:	08 f0       	brcs	.+2      	; 0x748 <__udivmodqi4_ep>
 746:	96 1b       	sub	r25, r22

00000748 <__udivmodqi4_ep>:
 748:	88 1f       	adc	r24, r24
 74a:	7a 95       	dec	r23
 74c:	c9 f7       	brne	.-14     	; 0x740 <__udivmodqi4_loop>
 74e:	80 95       	com	r24
 750:	08 95       	ret

00000752 <_exit>:
 752:	f8 94       	cli

00000754 <__stop_program>:
 754:	ff cf       	rjmp	.-2      	; 0x754 <__stop_program>
